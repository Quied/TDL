#pragma once

#include <ntifs.h>
#include <fstream.h>
// #include "ndis.h"
// #include "ndis/nbl.h"


#define IOCTL_PRINT_DEBUG_MESS CTL_CODE(\
FILE_DEVICE_UNKNOWN, 0x701, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_CHANGE_IRQL CTL_CODE(\
FILE_DEVICE_UNKNOWN, 0x702, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MAKE_SYSTEM_CRASH CTL_CODE(\
FILE_DEVICE_UNKNOWN, 0x703, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_TOUCH_PORT_378H CTL_CODE(\
FILE_DEVICE_UNKNOWN, 0x704, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_SEND_BYTE_TO_USER CTL_CODE(\
FILE_DEVICE_UNKNOWN, 0x705, METHOD_BUFFERED, FILE_ANY_ACCESS)

typedef struct _PRIMER_DEVICE_EXTENSION {

	PDEVICE_OBJECT fdo; 
	UNICODE_STRING ustrSymLinkName;

}PRIMER_DEVICE_EXTENSION, * PPRIMER_DEVICE_EXTENSION;;


NTSTATUS DeviceControlRoutine(IN PDEVICE_OBJECT fdo, IN PIRP Irp);

NTSTATUS DriverEntry(PDRIVER_OBJECT pDriveObj,PUNICODE_STRING pRegistKey);

NTSTATUS UnloadDriver(PDRIVER_OBJECT pDriverOvb);

VOID UnloadRoutine(IN PDRIVER_OBJECT DriverObject);

NTSTATUS
ReadWrite_IRPhandler(IN PDEVICE_OBJECT fdo, IN PIRP Irp);

NTSTATUS
Create_File_IRPprocessing(IN PDEVICE_OBJECT fdo, IN PIRP Irp);

NTSTATUS
Close_HandleIRPprocessing(IN PDEVICE_OBJECT fdo, IN PIRP Irp);

KSPIN_LOCK SpinLock;
#pragma code_seg("INIT")